# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
from baml_py import type_builder
from baml_py import baml_py
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(type_builder.TypeBuilder):
    def __init__(self):
        super().__init__(
            classes=set(
                [
                    "FaithfulnessError",
                    "PublicationTime",
                ]
            ),
            enums=set(
                [
                    "FaithfulnessErrorType",
                ]
            ),
            runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
        )

    # #########################################################################
    # Generated enums 1
    # #########################################################################

    @property
    def FaithfulnessErrorType(self) -> "FaithfulnessErrorTypeViewer":
        return FaithfulnessErrorTypeViewer(self)

    # #########################################################################
    # Generated classes 2
    # #########################################################################

    @property
    def FaithfulnessError(self) -> "FaithfulnessErrorViewer":
        return FaithfulnessErrorViewer(self)

    @property
    def PublicationTime(self) -> "PublicationTimeViewer":
        return PublicationTimeViewer(self)


# #########################################################################
# Generated enums 1
# #########################################################################


class FaithfulnessErrorTypeAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb  # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("FaithfulnessErrorType")
        self._values: typing.Set[str] = set(
            [
                "CONTRADICTORY_FACTS",
                "NUMERIC_STATISTICAL_DISTORTION",
                "WRONG_DATES_TIMELINE",
                "INCORRECT_ATTRIBUTION_IDENTIFIER",
                "CONTEXTUAL_OMISSION",
                "BAD_OR_NONEXISTENT_SOURCE",
                "SPECULATION_AS_FACT",
                "OUTDATED_INFORMATION",
                "FALSE_CAUSATION",
                "OVERGENERALIZATION",
            ]
        )
        self._vals = FaithfulnessErrorTypeValues(self._bldr, self._values)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "FaithfulnessErrorTypeValues":
        return self._vals


class FaithfulnessErrorTypeViewer(FaithfulnessErrorTypeAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    def list_values(
        self,
    ) -> typing.List[typing.Tuple[str, type_builder.EnumValueViewer]]:
        return [
            (name, type_builder.EnumValueViewer(self._bldr.value(name)))
            for name in self._values
        ]


class FaithfulnessErrorTypeValues:
    def __init__(self, enum_bldr: baml_py.EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values  # type: ignore (we know how to use this private attribute) # noqa: F821

    @property
    def CONTRADICTORY_FACTS(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("CONTRADICTORY_FACTS"))

    @property
    def NUMERIC_STATISTICAL_DISTORTION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(
            self.__bldr.value("NUMERIC_STATISTICAL_DISTORTION")
        )

    @property
    def WRONG_DATES_TIMELINE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("WRONG_DATES_TIMELINE"))

    @property
    def INCORRECT_ATTRIBUTION_IDENTIFIER(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(
            self.__bldr.value("INCORRECT_ATTRIBUTION_IDENTIFIER")
        )

    @property
    def CONTEXTUAL_OMISSION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("CONTEXTUAL_OMISSION"))

    @property
    def BAD_OR_NONEXISTENT_SOURCE(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(
            self.__bldr.value("BAD_OR_NONEXISTENT_SOURCE")
        )

    @property
    def SPECULATION_AS_FACT(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("SPECULATION_AS_FACT"))

    @property
    def OUTDATED_INFORMATION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("OUTDATED_INFORMATION"))

    @property
    def FALSE_CAUSATION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("FALSE_CAUSATION"))

    @property
    def OVERGENERALIZATION(self) -> type_builder.EnumValueViewer:
        return type_builder.EnumValueViewer(self.__bldr.value("OVERGENERALIZATION"))


# #########################################################################
# Generated classes 2
# #########################################################################


class FaithfulnessErrorAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb  # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("FaithfulnessError")
        self._properties: typing.Set[str] = set(
            [
                "reasoning",
                "error_type",
            ]
        )
        self._props = FaithfulnessErrorProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "FaithfulnessErrorProperties":
        return self._props


class FaithfulnessErrorViewer(FaithfulnessErrorAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    def list_properties(
        self,
    ) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [
            (name, type_builder.ClassPropertyViewer(self._bldr.property(name)))
            for name in self._properties
        ]


class FaithfulnessErrorProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties  # type: ignore (we know how to use this private attribute) # noqa: F821

    @property
    def reasoning(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("reasoning"))

    @property
    def error_type(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("error_type"))


class PublicationTimeAst:
    def __init__(self, tb: type_builder.TypeBuilder):
        _tb = tb._tb  # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PublicationTime")
        self._properties: typing.Set[str] = set(
            [
                "reasoning",
                "is_in_the_text",
                "year",
                "month",
                "day",
            ]
        )
        self._props = PublicationTimeProperties(self._bldr, self._properties)

    def type(self) -> baml_py.FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PublicationTimeProperties":
        return self._props


class PublicationTimeViewer(PublicationTimeAst):
    def __init__(self, tb: type_builder.TypeBuilder):
        super().__init__(tb)

    def list_properties(
        self,
    ) -> typing.List[typing.Tuple[str, type_builder.ClassPropertyViewer]]:
        return [
            (name, type_builder.ClassPropertyViewer(self._bldr.property(name)))
            for name in self._properties
        ]


class PublicationTimeProperties:
    def __init__(self, bldr: baml_py.ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties  # type: ignore (we know how to use this private attribute) # noqa: F821

    @property
    def reasoning(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("reasoning"))

    @property
    def is_in_the_text(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("is_in_the_text"))

    @property
    def year(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("year"))

    @property
    def month(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("month"))

    @property
    def day(self) -> type_builder.ClassPropertyViewer:
        return type_builder.ClassPropertyViewer(self.__bldr.property("day"))
