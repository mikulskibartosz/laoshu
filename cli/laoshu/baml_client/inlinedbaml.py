# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {
    "clients.baml": 'client<llm> Model {\n  provider openai\n  retry_policy Exponential\n  options {\n    model "gpt-4o-mini"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}',
    "faithfulness_errors.baml": 'enum FaithfulnessErrorType {\n  CONTRADICTORY_FACTS @description("The claim states something that directly contradicts information in the source")\n  EXAGGERATED_NUMBERS @description("Claim inflates or deflates numerical data from the source")\n  WRONG_DATES_TIMELINE @description("Claim misrepresents when events occurred according to the source")\n  INCORRECT_NAMES_IDENTIFIERS @description("Claim uses wrong names, titles, or identifiers for people, places, or things")\n  MISATTRIBUTED_QUOTES @description("Claim attributes a statement to the wrong person or source")\n  OUT_OF_CONTEXT_INFORMATION @description("Claim takes information from source but removes crucial context that changes meaning")\n  WRONG_SOURCE_ATTRIBUTION @description("Claim cites a source that doesn\'t actually contain the stated information")\n  FABRICATED_CITATIONS @description("Claim references a source that doesn\'t exist or doesn\'t contain the claimed content")\n  PARTIAL_TRUTH_DISTORTION @description("Claim presents only part of the story from the source, omitting important qualifiers")\n  SPECULATION_AS_FACT @description("Claim treats source\'s speculation or hypotheses as established facts")\n  OUTDATED_INFORMATION @description("Claim uses information from source that has been superseded or corrected")\n  MISSING_QUALIFICATIONS @description("Claim omits important caveats, limitations, or conditions mentioned in source")\n  FALSE_CAUSATION @description("Claim suggests cause-and-effect relationship not supported by source")\n  OVERGENERALIZATION @description("Claim extends source\'s specific findings to broader conclusions not justified")\n  CHERRY_PICKING @description("Claim selectively uses only supporting evidence while ignoring contradictory information in source")\n  MISINTERPRETATION_OF_STATISTICS @description("Claim misrepresents statistical findings or their significance from source")\n}\n\nclass FaithfulnessError {\n  reasoning string\n  error_type FaithfulnessErrorType\n}\n\nfunction ClassifyFaithfulnessErrors(claim: string, source_content: string) -> FaithfulnessError[] {\n  client "openai/gpt-4o-mini"\n  prompt #"\n    Analyze the relationship between the claim and the source content to identify any citation mistakes.\n\n    Claim: {{ claim }}\n    ---\n    Source Content: {{ source_content }}\n    ---\n\n    Identify all types of faithfulness errors present in the claim when compared to the source content.\n    Focus on how the claim misrepresents, distorts, or incorrectly attributes information from the source.\n\n    Return a list of FaithfulnessError objects, each containing the reasoning and error_type.\n\n    {{ ctx.output_format }}\n  "#\n}\n\ntest sample_faithfulness_check {\n  functions [ClassifyFaithfulnessErrors]\n  args {\n    claim "The bridge required approximately 10,000 workers over four years to complete and cost around $8.5 billion."\n    source_content "The Danyangâ€“Kunshan Grand Bridge was completed in 2011 and spans 164.8 kilometers. Construction involved thousands of workers and cost billions of dollars, though exact figures vary by source."\n  }\n}\n',
    "generators.baml": '// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: "python/pydantic", "typescript", "ruby/sorbet", "rest/openapi"\n    output_type "python/pydantic"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir "../laoshu"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version "0.201.0"\n\n    // Valid values: "sync", "async"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n',
}


def get_baml_files():
    return _file_map
